{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prefecto A handy helper for Prefect development.","title":"Home"},{"location":"#prefecto","text":"A handy helper for Prefect development.","title":"Prefecto"},{"location":"batch_task/","text":"BatchTask Wraps a Task to perform Task.map in batches. Parameters: task ( Task ) \u2013 The task to wrap. size ( int ) \u2013 The size of the batches to perform Task.map on. map ( * args , ** kwds ) Perform a Task.map operation in batches of the keyword arguments. The arguments must be iterables of equal length. Parameters: *args \u2013 Positional arguments to pass to the task. **kwds \u2013 Keyword arguments to pass to the task. Returns: list [ PrefectFuture ] \u2013 A list of futures for each batch. Examples: from prefect import flow, task from prefecto.concurrency import BatchTask @task def add(a, b): return a + b @flow def my_flow(): batch_add = BatchTask(add, 2) return batch_add.map([1,2,3,4], [2,3,4,5]) print(my_flow()) $ python my_flow.py 01:31:51.012 | INFO | prefect.engine - Created flow run 'beryl-moth' for flow 'test' 01:31:52.238 | DEBUG | Flow run 'beryl-moth' - Mapping 'add' batch 1 of 2. 01:31:52.239 | INFO | Flow run 'beryl-moth' - Created task run 'add-0' for task 'add' 01:31:52.240 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-0' for execution. 01:31:52.253 | INFO | Flow run 'beryl-moth' - Created task run 'add-1' for task 'add' 01:31:52.254 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-1' for execution. 01:31:52.259 | DEBUG | Flow run 'beryl-moth' - Mapping 'add' batch 2 of 2. 01:31:52.258 | INFO | Flow run 'beryl-moth' - Created task run 'add-3' for task 'add' 01:31:52.258 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-3' for execution. 01:31:52.260 | INFO | Flow run 'beryl-moth' - Created task run 'add-2' for task 'add' 01:31:52.261 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-2' for execution. 01:31:52.675 | INFO | Task run 'add-1' - Finished in state Completed() 01:31:52.770 | INFO | Task run 'add-0' - Finished in state Completed() 01:31:52.885 | INFO | Task run 'add-2' - Finished in state Completed() 01:31:53.075 | INFO | Task run 'add-3' - Finished in state Completed() 01:31:53.979 | INFO | Flow run 'beryl-moth' - Finished in state Completed() [3, 5, 7, 9]","title":"BatchTask"},{"location":"batch_task/#batchtask","text":"Wraps a Task to perform Task.map in batches. Parameters: task ( Task ) \u2013 The task to wrap. size ( int ) \u2013 The size of the batches to perform Task.map on.","title":"BatchTask"},{"location":"batch_task/#src.prefecto.concurrency.BatchTask.map","text":"Perform a Task.map operation in batches of the keyword arguments. The arguments must be iterables of equal length. Parameters: *args \u2013 Positional arguments to pass to the task. **kwds \u2013 Keyword arguments to pass to the task. Returns: list [ PrefectFuture ] \u2013 A list of futures for each batch. Examples: from prefect import flow, task from prefecto.concurrency import BatchTask @task def add(a, b): return a + b @flow def my_flow(): batch_add = BatchTask(add, 2) return batch_add.map([1,2,3,4], [2,3,4,5]) print(my_flow()) $ python my_flow.py 01:31:51.012 | INFO | prefect.engine - Created flow run 'beryl-moth' for flow 'test' 01:31:52.238 | DEBUG | Flow run 'beryl-moth' - Mapping 'add' batch 1 of 2. 01:31:52.239 | INFO | Flow run 'beryl-moth' - Created task run 'add-0' for task 'add' 01:31:52.240 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-0' for execution. 01:31:52.253 | INFO | Flow run 'beryl-moth' - Created task run 'add-1' for task 'add' 01:31:52.254 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-1' for execution. 01:31:52.259 | DEBUG | Flow run 'beryl-moth' - Mapping 'add' batch 2 of 2. 01:31:52.258 | INFO | Flow run 'beryl-moth' - Created task run 'add-3' for task 'add' 01:31:52.258 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-3' for execution. 01:31:52.260 | INFO | Flow run 'beryl-moth' - Created task run 'add-2' for task 'add' 01:31:52.261 | INFO | Flow run 'beryl-moth' - Submitted task run 'add-2' for execution. 01:31:52.675 | INFO | Task run 'add-1' - Finished in state Completed() 01:31:52.770 | INFO | Task run 'add-0' - Finished in state Completed() 01:31:52.885 | INFO | Task run 'add-2' - Finished in state Completed() 01:31:53.075 | INFO | Task run 'add-3' - Finished in state Completed() 01:31:53.979 | INFO | Flow run 'beryl-moth' - Finished in state Completed() [3, 5, 7, 9]","title":"map()"},{"location":"license/","text":"License MIT License Copyright (c) 2023 Dominic Tarro Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2023 Dominic Tarro Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"serializers/extended_serializer/","text":"ExtendedSerializer Type: ext Bases: Serializer Extends the Serializer class to allow for custom serializers to be registered with their own methods for reading and writing. Good for complex types with standard read and write methods. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: from prefecto.serializers import ExtendedSerializer, Method, get_method def read(io: IO, encoding: str = 'utf-8') -> str: return io.read().decode(encoding) def write(value: str, io: IO, encoding: str = 'utf-8') -> None: io.write(value.encode(encoding)) class Utf8(Method): discriminator = \"utf8\" __read__ = read __write__ = write class Latin1(Method): discriminator = \"latin1\" __read__ = read __write__ = write default_read_kwargs = {\"encoding\": \"latin1\"} default_write_kwargs = {\"encoding\": \"latin1\"} ExtendedSerializer(\"utf8\").dumps(\"Hello, world!\") b'Hello, world!' get_method () Gets the Method to read and write objects with. dumps ( value ) Serialize the object with Method.write . Parameters: value ( Any ) \u2013 The object to serialize. Returns: bytes ( bytes ) \u2013 The serialized object. loads ( value ) Deserialize the object with Method.read . Parameters: value ( bytes ) \u2013 The serialized object. Returns: Any ( Any ) \u2013 The deserialized object.","title":"ExtendedSerializer"},{"location":"serializers/extended_serializer/#extendedserializer","text":"Type: ext Bases: Serializer Extends the Serializer class to allow for custom serializers to be registered with their own methods for reading and writing. Good for complex types with standard read and write methods. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: from prefecto.serializers import ExtendedSerializer, Method, get_method def read(io: IO, encoding: str = 'utf-8') -> str: return io.read().decode(encoding) def write(value: str, io: IO, encoding: str = 'utf-8') -> None: io.write(value.encode(encoding)) class Utf8(Method): discriminator = \"utf8\" __read__ = read __write__ = write class Latin1(Method): discriminator = \"latin1\" __read__ = read __write__ = write default_read_kwargs = {\"encoding\": \"latin1\"} default_write_kwargs = {\"encoding\": \"latin1\"} ExtendedSerializer(\"utf8\").dumps(\"Hello, world!\") b'Hello, world!'","title":"ExtendedSerializer"},{"location":"serializers/extended_serializer/#src.prefecto.serializers.core.ExtendedSerializer.get_method","text":"Gets the Method to read and write objects with.","title":"get_method()"},{"location":"serializers/extended_serializer/#src.prefecto.serializers.core.ExtendedSerializer.dumps","text":"Serialize the object with Method.write . Parameters: value ( Any ) \u2013 The object to serialize. Returns: bytes ( bytes ) \u2013 The serialized object.","title":"dumps()"},{"location":"serializers/extended_serializer/#src.prefecto.serializers.core.ExtendedSerializer.loads","text":"Deserialize the object with Method.read . Parameters: value ( bytes ) \u2013 The serialized object. Returns: Any ( Any ) \u2013 The deserialized object.","title":"loads()"},{"location":"serializers/functions/","text":"Functions get_method Gets the Method by its discriminator. Parameters: discriminator ( str ) \u2013 The discriminator for the method. Raises: KeyError \u2013 If the discriminator is not registered. Returns: Method ( Method ) \u2013 The method.","title":"Functions"},{"location":"serializers/functions/#functions","text":"","title":"Functions"},{"location":"serializers/functions/#get_method","text":"Gets the Method by its discriminator. Parameters: discriminator ( str ) \u2013 The discriminator for the method. Raises: KeyError \u2013 If the discriminator is not registered. Returns: Method ( Method ) \u2013 The method.","title":"get_method"},{"location":"serializers/method/","text":"Method A method for reading and writing a type. To be subclassed for access via its discriminator. Parameters: discriminator ( str ) \u2013 The discriminator for the method. This must be globally unique. __read__ ( Callable ) \u2013 The function to read the object. __write__ ( Callable ) \u2013 The function to write the object. default_read_kwargs ( dict [ str , Any ] ) \u2013 Default keyword arguments for the read function. Must accept a BytesIO object as the first argument. default_write_kwargs ( dict [ str , Any ] ) \u2013 Default keyword arguments for the write function. Must accept the object to serialize as the first argument and a BytesIO object as the second argument. Examples: from io import IOBase as IO from prefecto.serializers import Method def read(io: IO, encoding: str = 'utf-8') -> str: return io.read().decode(encoding) def write(value: str, io: IO, encoding: str = 'utf-8') -> None: io.write(value.encode(encoding)) class Utf8(Method): discriminator = \"utf8\" __read__ = read __write__ = write class Latin1(Method): discriminator = \"latin1\" __read__ = read __write__ = write default_read_kwargs = {\"encoding\": \"latin1\"} default_write_kwargs = {\"encoding\": \"latin1\"} read ( * args , ** kwargs ) classmethod Reads the object. write ( * args , ** kwargs ) classmethod Writes the object.","title":"Method"},{"location":"serializers/method/#method","text":"A method for reading and writing a type. To be subclassed for access via its discriminator. Parameters: discriminator ( str ) \u2013 The discriminator for the method. This must be globally unique. __read__ ( Callable ) \u2013 The function to read the object. __write__ ( Callable ) \u2013 The function to write the object. default_read_kwargs ( dict [ str , Any ] ) \u2013 Default keyword arguments for the read function. Must accept a BytesIO object as the first argument. default_write_kwargs ( dict [ str , Any ] ) \u2013 Default keyword arguments for the write function. Must accept the object to serialize as the first argument and a BytesIO object as the second argument. Examples: from io import IOBase as IO from prefecto.serializers import Method def read(io: IO, encoding: str = 'utf-8') -> str: return io.read().decode(encoding) def write(value: str, io: IO, encoding: str = 'utf-8') -> None: io.write(value.encode(encoding)) class Utf8(Method): discriminator = \"utf8\" __read__ = read __write__ = write class Latin1(Method): discriminator = \"latin1\" __read__ = read __write__ = write default_read_kwargs = {\"encoding\": \"latin1\"} default_write_kwargs = {\"encoding\": \"latin1\"}","title":"Method"},{"location":"serializers/method/#src.prefecto.serializers.core.Method.read","text":"Reads the object.","title":"read()"},{"location":"serializers/method/#src.prefecto.serializers.core.Method.write","text":"Writes the object.","title":"write()"},{"location":"serializers/pandas/methods/","text":"Methods Method classes for serializing pandas.DataFrame . CSV Discriminator: pandas.csv Bases: Method Method for reading and writing CSV files. Source code in src/prefecto/serializers/pandas.py 27 28 29 30 31 32 33 class CSV ( Method ): \"\"\"Method for reading and writing CSV files.\"\"\" discriminator : str = \"pandas.csv\" default_write_kwargs : dict [ str , Any ] = { \"index\" : False } __read__ = pd . read_csv __write__ = pd . DataFrame . to_csv Excel Discriminator: pandas.excel Bases: Method Method for reading and writing Excel files. Source code in src/prefecto/serializers/pandas.py 80 81 82 83 84 85 86 class Excel ( Method ): \"\"\"Method for reading and writing Excel files.\"\"\" discriminator : str = \"pandas.excel\" default_write_kwargs : dict [ str , Any ] = { \"index\" : False } __read__ = pd . read_excel __write__ = pd . DataFrame . to_excel Feather Discriminator: pandas.feather Bases: Method Method for reading and writing Feather files. Source code in src/prefecto/serializers/pandas.py 54 55 56 57 58 59 class Feather ( Method ): \"\"\"Method for reading and writing Feather files.\"\"\" discriminator : str = \"pandas.feather\" __read__ = pd . read_feather __write__ = pd . DataFrame . to_feather JSON Discriminator: pandas.json Bases: Method Method for reading and writing JSON files. Source code in src/prefecto/serializers/pandas.py 36 37 38 39 40 41 class JSON ( Method ): \"\"\"Method for reading and writing JSON files.\"\"\" discriminator : str = \"pandas.json\" __read__ = pd . read_json __write__ = pd . DataFrame . to_json JSONL Discriminator: pandas.jsonl Bases: Method Method for reading and writing JSONL files. Source code in src/prefecto/serializers/pandas.py 44 45 46 47 48 49 50 51 class JSONL ( Method ): \"\"\"Method for reading and writing JSONL files.\"\"\" discriminator : str = \"pandas.jsonl\" default_read_kwargs : dict [ str , Any ] = { \"lines\" : True , \"orient\" : \"records\" } default_write_kwargs : dict [ str , Any ] = { \"lines\" : True , \"orient\" : \"records\" } __read__ = pd . read_json __write__ = pd . DataFrame . to_json Parquet Discriminator: pandas.parquet Bases: Method Method for reading and writing Parquet files. Source code in src/prefecto/serializers/pandas.py 19 20 21 22 23 24 class Parquet ( Method ): \"\"\"Method for reading and writing Parquet files.\"\"\" discriminator : str = \"pandas.parquet\" __read__ = pd . read_parquet __write__ = pd . DataFrame . to_parquet Pickle Discriminator: pandas.pickle Bases: Method Method for reading and writing Pickle files. Source code in src/prefecto/serializers/pandas.py 62 63 64 65 66 67 class Pickle ( Method ): \"\"\"Method for reading and writing Pickle files.\"\"\" discriminator : str = \"pandas.pickle\" __read__ = pd . read_pickle __write__ = pd . DataFrame . to_pickle TSV Discriminator: pandas.tsv Bases: Method Method for reading and writing TSV files. Source code in src/prefecto/serializers/pandas.py 70 71 72 73 74 75 76 77 class TSV ( Method ): \"\"\"Method for reading and writing TSV files.\"\"\" discriminator : str = \"pandas.tsv\" default_read_kwargs : dict [ str , Any ] = { \"sep\" : \" \\t \" } default_write_kwargs : dict [ str , Any ] = { \"sep\" : \" \\t \" , \"index\" : False } __read__ = pd . read_table __write__ = pd . DataFrame . to_csv","title":"Methods"},{"location":"serializers/pandas/methods/#methods","text":"Method classes for serializing pandas.DataFrame .","title":"Methods"},{"location":"serializers/pandas/methods/#csv","text":"Discriminator: pandas.csv Bases: Method Method for reading and writing CSV files. Source code in src/prefecto/serializers/pandas.py 27 28 29 30 31 32 33 class CSV ( Method ): \"\"\"Method for reading and writing CSV files.\"\"\" discriminator : str = \"pandas.csv\" default_write_kwargs : dict [ str , Any ] = { \"index\" : False } __read__ = pd . read_csv __write__ = pd . DataFrame . to_csv","title":"CSV"},{"location":"serializers/pandas/methods/#excel","text":"Discriminator: pandas.excel Bases: Method Method for reading and writing Excel files. Source code in src/prefecto/serializers/pandas.py 80 81 82 83 84 85 86 class Excel ( Method ): \"\"\"Method for reading and writing Excel files.\"\"\" discriminator : str = \"pandas.excel\" default_write_kwargs : dict [ str , Any ] = { \"index\" : False } __read__ = pd . read_excel __write__ = pd . DataFrame . to_excel","title":"Excel"},{"location":"serializers/pandas/methods/#feather","text":"Discriminator: pandas.feather Bases: Method Method for reading and writing Feather files. Source code in src/prefecto/serializers/pandas.py 54 55 56 57 58 59 class Feather ( Method ): \"\"\"Method for reading and writing Feather files.\"\"\" discriminator : str = \"pandas.feather\" __read__ = pd . read_feather __write__ = pd . DataFrame . to_feather","title":"Feather"},{"location":"serializers/pandas/methods/#json","text":"Discriminator: pandas.json Bases: Method Method for reading and writing JSON files. Source code in src/prefecto/serializers/pandas.py 36 37 38 39 40 41 class JSON ( Method ): \"\"\"Method for reading and writing JSON files.\"\"\" discriminator : str = \"pandas.json\" __read__ = pd . read_json __write__ = pd . DataFrame . to_json","title":"JSON"},{"location":"serializers/pandas/methods/#jsonl","text":"Discriminator: pandas.jsonl Bases: Method Method for reading and writing JSONL files. Source code in src/prefecto/serializers/pandas.py 44 45 46 47 48 49 50 51 class JSONL ( Method ): \"\"\"Method for reading and writing JSONL files.\"\"\" discriminator : str = \"pandas.jsonl\" default_read_kwargs : dict [ str , Any ] = { \"lines\" : True , \"orient\" : \"records\" } default_write_kwargs : dict [ str , Any ] = { \"lines\" : True , \"orient\" : \"records\" } __read__ = pd . read_json __write__ = pd . DataFrame . to_json","title":"JSONL"},{"location":"serializers/pandas/methods/#parquet","text":"Discriminator: pandas.parquet Bases: Method Method for reading and writing Parquet files. Source code in src/prefecto/serializers/pandas.py 19 20 21 22 23 24 class Parquet ( Method ): \"\"\"Method for reading and writing Parquet files.\"\"\" discriminator : str = \"pandas.parquet\" __read__ = pd . read_parquet __write__ = pd . DataFrame . to_parquet","title":"Parquet"},{"location":"serializers/pandas/methods/#pickle","text":"Discriminator: pandas.pickle Bases: Method Method for reading and writing Pickle files. Source code in src/prefecto/serializers/pandas.py 62 63 64 65 66 67 class Pickle ( Method ): \"\"\"Method for reading and writing Pickle files.\"\"\" discriminator : str = \"pandas.pickle\" __read__ = pd . read_pickle __write__ = pd . DataFrame . to_pickle","title":"Pickle"},{"location":"serializers/pandas/methods/#tsv","text":"Discriminator: pandas.tsv Bases: Method Method for reading and writing TSV files. Source code in src/prefecto/serializers/pandas.py 70 71 72 73 74 75 76 77 class TSV ( Method ): \"\"\"Method for reading and writing TSV files.\"\"\" discriminator : str = \"pandas.tsv\" default_read_kwargs : dict [ str , Any ] = { \"sep\" : \" \\t \" } default_write_kwargs : dict [ str , Any ] = { \"sep\" : \" \\t \" , \"index\" : False } __read__ = pd . read_table __write__ = pd . DataFrame . to_csv","title":"TSV"},{"location":"serializers/pandas/pandas_serializer/","text":"PandasSerializer Type: pandas Bases: ExtendedSerializer Serializer for pandas.DataFrame objects. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . Defaults to \"pandas.tsv\". read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. import pandas as pd from prefecto.serializers.pandas import PandasSerializer df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PandasSerializer().dumps(df) df2 = PandasSerializer().loads(blob) assert df2.equals(df) Using custom read and write kwargs. blob = PandasSerializer(write_kwargs={\"index\": True}).dumps(df) df2 = PandasSerializer(read_kwargs={\"index_col\": 0}).loads(blob) assert df2.equals(df) Source code in src/prefecto/serializers/pandas.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @ExtendedSerializer . register class PandasSerializer ( ExtendedSerializer ): \"\"\"Serializer for `pandas.DataFrame` objects. Args: method (str, optional): The method to use for reading and writing. Must be a registered `Method`. Defaults to \"pandas.tsv\". read_kwargs (dict[str, Any], optional): Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs (dict[str, Any], optional): Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. ```python import pandas as pd from prefecto.serializers.pandas import PandasSerializer df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PandasSerializer().dumps(df) df2 = PandasSerializer().loads(blob) assert df2.equals(df) ``` Using custom read and write kwargs. ```python blob = PandasSerializer(write_kwargs={\"index\": True}).dumps(df) df2 = PandasSerializer(read_kwargs={\"index_col\": 0}).loads(blob) assert df2.equals(df) ``` \"\"\" type : Literal [ \"pandas\" ] = \"pandas\" method = \"pandas.tsv\"","title":"PandasSerializer"},{"location":"serializers/pandas/pandas_serializer/#pandasserializer","text":"Type: pandas Bases: ExtendedSerializer Serializer for pandas.DataFrame objects. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . Defaults to \"pandas.tsv\". read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. import pandas as pd from prefecto.serializers.pandas import PandasSerializer df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PandasSerializer().dumps(df) df2 = PandasSerializer().loads(blob) assert df2.equals(df) Using custom read and write kwargs. blob = PandasSerializer(write_kwargs={\"index\": True}).dumps(df) df2 = PandasSerializer(read_kwargs={\"index_col\": 0}).loads(blob) assert df2.equals(df) Source code in src/prefecto/serializers/pandas.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @ExtendedSerializer . register class PandasSerializer ( ExtendedSerializer ): \"\"\"Serializer for `pandas.DataFrame` objects. Args: method (str, optional): The method to use for reading and writing. Must be a registered `Method`. Defaults to \"pandas.tsv\". read_kwargs (dict[str, Any], optional): Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs (dict[str, Any], optional): Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. ```python import pandas as pd from prefecto.serializers.pandas import PandasSerializer df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PandasSerializer().dumps(df) df2 = PandasSerializer().loads(blob) assert df2.equals(df) ``` Using custom read and write kwargs. ```python blob = PandasSerializer(write_kwargs={\"index\": True}).dumps(df) df2 = PandasSerializer(read_kwargs={\"index_col\": 0}).loads(blob) assert df2.equals(df) ``` \"\"\" type : Literal [ \"pandas\" ] = \"pandas\" method = \"pandas.tsv\"","title":"PandasSerializer"},{"location":"serializers/polars/methods/","text":"Methods Method classes for serializing polars.DataFrame . CSV Discriminator: polars.csv Bases: Method Method for reading and writing CSV files. Source code in src/prefecto/serializers/polars.py 27 28 29 30 31 32 33 class CSV ( Method ): \"\"\"Method for reading and writing CSV files.\"\"\" discriminator : str = \"polars.csv\" default_write_kwargs : dict [ str , Any ] = {} __read__ = pl . read_csv __write__ = pl . DataFrame . write_csv Excel Discriminator: polars.excel Bases: Method Method for reading and writing Excel files. Source code in src/prefecto/serializers/polars.py 62 63 64 65 66 67 class Excel ( Method ): \"\"\"Method for reading and writing Excel files.\"\"\" discriminator : str = \"polars.excel\" __read__ = pl . read_excel __write__ = pl . DataFrame . write_excel JSON Discriminator: polars.json Bases: Method Method for reading and writing JSON files. Source code in src/prefecto/serializers/polars.py 36 37 38 39 40 41 class JSON ( Method ): \"\"\"Method for reading and writing JSON files.\"\"\" discriminator : str = \"polars.json\" __read__ = pl . read_json __write__ = pl . DataFrame . write_json NDJSON Discriminator: polars.ndjson Bases: Method Method for reading and writing NDJSON files. Source code in src/prefecto/serializers/polars.py 44 45 46 47 48 49 class NDJSON ( Method ): \"\"\"Method for reading and writing NDJSON files.\"\"\" discriminator : str = \"polars.ndjson\" __read__ = pl . read_ndjson __write__ = pl . DataFrame . write_ndjson Parquet Discriminator: polars.parquet Bases: Method Method for reading and writing Parquet files. Source code in src/prefecto/serializers/polars.py 19 20 21 22 23 24 class Parquet ( Method ): \"\"\"Method for reading and writing Parquet files.\"\"\" discriminator : str = \"polars.parquet\" __read__ = pl . read_parquet __write__ = pl . DataFrame . write_parquet TSV Discriminator: polars.tsv Bases: Method Method for reading and writing TSV files. Source code in src/prefecto/serializers/polars.py 52 53 54 55 56 57 58 59 class TSV ( Method ): \"\"\"Method for reading and writing TSV files.\"\"\" discriminator : str = \"polars.tsv\" default_read_kwargs : dict [ str , Any ] = { \"separator\" : \" \\t \" } default_write_kwargs : dict [ str , Any ] = { \"separator\" : \" \\t \" } __read__ = pl . read_csv __write__ = pl . DataFrame . write_csv","title":"Methods"},{"location":"serializers/polars/methods/#methods","text":"Method classes for serializing polars.DataFrame .","title":"Methods"},{"location":"serializers/polars/methods/#csv","text":"Discriminator: polars.csv Bases: Method Method for reading and writing CSV files. Source code in src/prefecto/serializers/polars.py 27 28 29 30 31 32 33 class CSV ( Method ): \"\"\"Method for reading and writing CSV files.\"\"\" discriminator : str = \"polars.csv\" default_write_kwargs : dict [ str , Any ] = {} __read__ = pl . read_csv __write__ = pl . DataFrame . write_csv","title":"CSV"},{"location":"serializers/polars/methods/#excel","text":"Discriminator: polars.excel Bases: Method Method for reading and writing Excel files. Source code in src/prefecto/serializers/polars.py 62 63 64 65 66 67 class Excel ( Method ): \"\"\"Method for reading and writing Excel files.\"\"\" discriminator : str = \"polars.excel\" __read__ = pl . read_excel __write__ = pl . DataFrame . write_excel","title":"Excel"},{"location":"serializers/polars/methods/#json","text":"Discriminator: polars.json Bases: Method Method for reading and writing JSON files. Source code in src/prefecto/serializers/polars.py 36 37 38 39 40 41 class JSON ( Method ): \"\"\"Method for reading and writing JSON files.\"\"\" discriminator : str = \"polars.json\" __read__ = pl . read_json __write__ = pl . DataFrame . write_json","title":"JSON"},{"location":"serializers/polars/methods/#ndjson","text":"Discriminator: polars.ndjson Bases: Method Method for reading and writing NDJSON files. Source code in src/prefecto/serializers/polars.py 44 45 46 47 48 49 class NDJSON ( Method ): \"\"\"Method for reading and writing NDJSON files.\"\"\" discriminator : str = \"polars.ndjson\" __read__ = pl . read_ndjson __write__ = pl . DataFrame . write_ndjson","title":"NDJSON"},{"location":"serializers/polars/methods/#parquet","text":"Discriminator: polars.parquet Bases: Method Method for reading and writing Parquet files. Source code in src/prefecto/serializers/polars.py 19 20 21 22 23 24 class Parquet ( Method ): \"\"\"Method for reading and writing Parquet files.\"\"\" discriminator : str = \"polars.parquet\" __read__ = pl . read_parquet __write__ = pl . DataFrame . write_parquet","title":"Parquet"},{"location":"serializers/polars/methods/#tsv","text":"Discriminator: polars.tsv Bases: Method Method for reading and writing TSV files. Source code in src/prefecto/serializers/polars.py 52 53 54 55 56 57 58 59 class TSV ( Method ): \"\"\"Method for reading and writing TSV files.\"\"\" discriminator : str = \"polars.tsv\" default_read_kwargs : dict [ str , Any ] = { \"separator\" : \" \\t \" } default_write_kwargs : dict [ str , Any ] = { \"separator\" : \" \\t \" } __read__ = pl . read_csv __write__ = pl . DataFrame . write_csv","title":"TSV"},{"location":"serializers/polars/polars_serializer/","text":"PolarsSerializer Type: polars Bases: ExtendedSerializer Serializer for polars.DataFrame objects. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . Defaults to \"polars.tsv\". read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. import polars as pl from prefecto.serializers.polars import PolarsSerializer df = pl.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PolarsSerializer().dumps(df) print(blob) df2 = PolarsSerializer().loads(blob) assert df2.frame_equal(df) True Using a different method. blob = PolarsSerializer(method=\"polars.csv\").dumps(df) df2 = PolarsSerializer(method=\"polars.csv\").loads(blob) assert df2.frame_equal(df) True Using custom read and write kwargs. blob = PolarsSerializer(write_kwargs={\"use_pyarrow\": True}).dumps(df) df2 = PolarsSerializer(read_kwargs={\"use_pyarrow\": True}).loads(blob) assert df2.frame_equal(df) Source code in src/prefecto/serializers/polars.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 @ExtendedSerializer . register class PolarsSerializer ( ExtendedSerializer ): \"\"\"Serializer for `polars.DataFrame` objects. Args: method (str, optional): The method to use for reading and writing. Must be a registered `Method`. Defaults to \"polars.tsv\". read_kwargs (dict[str, Any], optional): Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs (dict[str, Any], optional): Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. ```python import polars as pl from prefecto.serializers.polars import PolarsSerializer df = pl.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PolarsSerializer().dumps(df) print(blob) df2 = PolarsSerializer().loads(blob) assert df2.frame_equal(df) ``` ```text True ``` Using a different method. ```python blob = PolarsSerializer(method=\"polars.csv\").dumps(df) df2 = PolarsSerializer(method=\"polars.csv\").loads(blob) assert df2.frame_equal(df) ``` ```text True ``` Using custom read and write kwargs. ```python blob = PolarsSerializer(write_kwargs={\"use_pyarrow\": True}).dumps(df) df2 = PolarsSerializer(read_kwargs={\"use_pyarrow\": True}).loads(blob) assert df2.frame_equal(df) ``` \"\"\" type : Literal [ \"polars\" ] = \"polars\" method = \"polars.parquet\"","title":"PolarsSerializer"},{"location":"serializers/polars/polars_serializer/#polarsserializer","text":"Type: polars Bases: ExtendedSerializer Serializer for polars.DataFrame objects. Parameters: method ( str ) \u2013 The method to use for reading and writing. Must be a registered Method . Defaults to \"polars.tsv\". read_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs ( dict [ str , Any ] ) \u2013 Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. import polars as pl from prefecto.serializers.polars import PolarsSerializer df = pl.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PolarsSerializer().dumps(df) print(blob) df2 = PolarsSerializer().loads(blob) assert df2.frame_equal(df) True Using a different method. blob = PolarsSerializer(method=\"polars.csv\").dumps(df) df2 = PolarsSerializer(method=\"polars.csv\").loads(blob) assert df2.frame_equal(df) True Using custom read and write kwargs. blob = PolarsSerializer(write_kwargs={\"use_pyarrow\": True}).dumps(df) df2 = PolarsSerializer(read_kwargs={\"use_pyarrow\": True}).loads(blob) assert df2.frame_equal(df) Source code in src/prefecto/serializers/polars.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 @ExtendedSerializer . register class PolarsSerializer ( ExtendedSerializer ): \"\"\"Serializer for `polars.DataFrame` objects. Args: method (str, optional): The method to use for reading and writing. Must be a registered `Method`. Defaults to \"polars.tsv\". read_kwargs (dict[str, Any], optional): Keyword arguments for the read method. Overrides default arguments for the method. write_kwargs (dict[str, Any], optional): Keyword arguments for the write method. Overrides default arguments for the method. Examples: Simple read and write. ```python import polars as pl from prefecto.serializers.polars import PolarsSerializer df = pl.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}) blob = PolarsSerializer().dumps(df) print(blob) df2 = PolarsSerializer().loads(blob) assert df2.frame_equal(df) ``` ```text True ``` Using a different method. ```python blob = PolarsSerializer(method=\"polars.csv\").dumps(df) df2 = PolarsSerializer(method=\"polars.csv\").loads(blob) assert df2.frame_equal(df) ``` ```text True ``` Using custom read and write kwargs. ```python blob = PolarsSerializer(write_kwargs={\"use_pyarrow\": True}).dumps(df) df2 = PolarsSerializer(read_kwargs={\"use_pyarrow\": True}).loads(blob) assert df2.frame_equal(df) ``` \"\"\" type : Literal [ \"polars\" ] = \"polars\" method = \"polars.parquet\"","title":"PolarsSerializer"}]}